clc; clear all
% Initial stream data
CFL = 2;                  % CFL number
k4 = 1/256;               % Dissipation k4 term
k2 = 1;                   % Dissipation k2 term
R  = 287;                 % Ideal gas constant
Pa = 101300;              % Atmospheric pressure
Ta = 288;                 % Temperature
gamma = 1.4;              % Gamma
rho_inf = Pa/R/Ta;        % Density
M_inf = 0.5;              % Mach
c_inf = sqrt(gamma*R*Ta); % Sound speed
u_inf = M_inf*c_inf;      % Flow velocity
E_inf = Pa/(gamma-1)/rho_inf + 0.5*(u_inf^2); %Flow energy
alpha=zeros(2,3);
alpha(1,1)=1/4;alpha(1,2)=1/3;alpha(1,3)=0.5;
alpha(2,1)=1/8;alpha(2,2)=0.306;alpha(2,3)=0.587;

rho = ones(Ny-1,Nx-1)*rho_inf;    %Initial density matrix
u = ones(Ny-1,Nx-1)*u_inf;        %Initial flow velocity in x matrix
v = zeros(Ny-1,Nx-1);             %Initial flow velocity in y matrix
E = ones(Ny-1,Nx-1)*E_inf;        %Initial flow energy matrix
P = ones(Ny-1,Nx-1)*Pa;           %Initial pressure matrix
H = E+P./rho;                     %Initial enthalpy matrix

% Initial geometry 
L = 1;
Lx = 3*L;
Ly = L;
Nx = 76;
Nx1 = ((Nx-1)/3);
Nx2 = (2*(Nx-1)/3)+1;
Nx3 = Nx;
dx = Lx/(Nx-1);
Ny = 30;
dy = (0.9*Ly)/(Ny-1);
x0 = 0;
xf = x0+Lx;
x = x0:dx:xf;

y0 = zeros(1,Nx);
for i = 1:Nx1
    y0(i) = 0;
end
for i = Nx1+1:Nx2
    y0(i) = yc+sqrt(r^2-x(i)^2+2*x(i)*xc-xc^2); %% Falta sacar el valor de r, yc, xc
end
for i = Nx2+1:Nx3
    y0(i) = 0;
end

%Cell area
A = zeros(Ny-1,Nx-1);
for i = 1:Ny-1
    for j = 1:Nx-1
        dxac = X(i+1,j)-X(i,j+1);
        dxbd = X(i,j)-X(i+1,j+1);
        dybd = Y(i,j)-Y(i+1,j+1);
        dyac = Y(i+1,j)-Y(i,j+1);
        
        A(i,j) = 0.5*(dxac*dybd - dxbd*dyac); 
    end
end

Y = zeros(Ny,Nx);
X = zeros(Ny,Nx);

for i = 1:Nx
    Y(:,i) = linspace(y0(i),Ly,Ny); % Ly is the height of the channel
% y0 is lower boundary coordinate, containing the equation of the bump
    X(:,i) = x(i); % X discretization
end

%  Definition of cell normals and geometry
dSy_east = Zeros; dSx_east = Zeros;
dSy_west = Zeros; dSx_west = Zeros;
dSy_north = Zeros; dSx_north = Zeros;
dSy_south = Zeros; dSx_south = Zeros;

for j = 1:Ny-1
    for i = 1:Nx-1
        dSy_east(j,i) = Y(j+1,i+1)-Y(j,i+1);
        dSx_east(j,i) = -X(j+1,i+1)+X(j,i+1);
        dSy_west(j,i) = -Y(j+1,i)+Y(j,i);
        dSx_west(j,i) = X(j+1,i)-X(j,i);       
        dSy_north(j,i) = Y(j+1,i)-Y(j+1,i+1);
        dSx_north(j,i) = X(j+1,i+1)-X(j+1,i);        
        dSy_south(j,i) = Y(j,i+1)-Y(j,i);
        dSx_south(j,i) = X(j,i)-X(j,i+1);
    end
end
[D1, D2, D3, D4] = artificial_dissipation (k4, k2, u, v, gamma, P, rho, Nx, Ny, X, Y);
[FS1x, FS2x, FS3x, FS4x, FS1y, FS2y, FS3y, FS4y, GS1x, GS2x, GS3x, GS4x, GS1y, GS2y, GS3y, GS4y] = Fluxes (rho, u, v, E, M_inf, Pa, Ta, gamma, R, Nx, Ny);

%1st step for Runge Kutta
for j = 1:Ny-1
    for i = 1:Nx-1
        R1(j,i) = dSy_east(j,i)*FS1x(j,i+1)+dSx_east(j,i)*GS1x(j,i+1)+dSy_west(j,i)*FS1x(j,i)+dSx_west(j,i)*GS1x(j,i)+dSy_north(j,i)*FS1y(j+1,i)+dSx_north(j,i)*GS1y(j+1,i)+dSy_south(j,i)*FS1y(j,i)+dSx_south(j,i)*GS1y(j,i)-D1(j,i);
        R2(j,i) = dSy_east(j,i)*FS2x(j,i+1)+dSx_east(j,i)*GS2x(j,i+1)+dSy_west(j,i)*FS2x(j,i)+dSx_west(j,i)*GS2x(j,i)+dSy_north(j,i)*FS2y(j+1,i)+dSx_north(j,i)*GS2y(j+1,i)+dSy_south(j,i)*FS2y(j,i)+dSx_south(j,i)*GS2y(j,i)-D2(j,i);
        R3(j,i) = dSy_east(j,i)*FS3x(j,i+1)+dSx_east(j,i)*GS3x(j,i+1)+dSy_west(j,i)*FS3x(j,i)+dSx_west(j,i)*GS3x(j,i)+dSy_north(j,i)*FS3y(j+1,i)+dSx_north(j,i)*GS3y(j+1,i)+dSy_south(j,i)*FS3y(j,i)+dSx_south(j,i)*GS3y(j,i)-D3(j,i);
        R4(j,i) = dSy_east(j,i)*FS4x(j,i+1)+dSx_east(j,i)*GS4x(j,i+1)+dSy_west(j,i)*FS4x(j,i)+dSx_west(j,i)*GS4x(j,i)+dSy_north(j,i)*FS4y(j+1,i)+dSx_north(j,i)*GS4y(j+1,i)+dSy_south(j,i)*FS4y(j,i)+dSx_south(j,i)*GS4y(j,i)-D4(j,i);
    end
end

%Calculation of the new U using Runge Kutta (Falta calcular el time step dt)
U1_next = rho-alpha(1,1)*dt*R1./A;
U2_next = rho.*u-alpha(1,1)*dt*R2./A;
U3_next = rho.*v-alpha(1,1)*dt*R3./A;
U4_next = rho.*E-alpha(1,1)*dt*R4./A;

rho = U1_next;
u = U2_next./U1_next;
v = U3_next./U1_next;
E = U4_next./U1_next;

%Fluxes and dissipation for 2nd step of Runge Kutta
[D1, D2, D3, D4] = artificial_dissipation (k4, k2, u, v, gamma, P, rho, Nx, Ny, X, Y);
[FS1x, FS2x, FS3x, FS4x, FS1y, FS2y, FS3y, FS4y, GS1x, GS2x, GS3x, GS4x, GS1y, GS2y, GS3y, GS4y] = Fluxes (rho, u, v, E, M_inf, Pa, Ta, gamma, R, Nx, Ny);
